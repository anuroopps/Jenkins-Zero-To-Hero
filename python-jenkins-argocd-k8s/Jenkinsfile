pipeline {
    agent any
     environment {
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
stages{
    stage('checkout') {
        steps {
            checkout scm
     }
    }     
   stage ('docker image build') {
       steps {
       sh '''
       echo 'Building docker image with tag $BUILD_NUMBER'
       docker build -t python-argocd:$BUILD_NUMBER -f python-jenkins-argocd-k8s/Dockerfile .
       docker tag python-argocd:$BUILD_NUMBER anuroopps/python-argocd-cicd:$BUILD_NUMBER
       '''
       }
   }
    stage ('docker login') {
        steps {
        withCredentials([usernamePassword(credentialsId: 'anuroopps-dockerhub', usernameVariable: 'DOCKER_USER_NAME', passwordVariable: 'DOCKER_PASSWORD') ])
        {
         sh 'echo logging in as $DOCKER_USER_NAME' 
         sh 'echo $DOCKER_PASSWORD | docker login -u anuroopps --password-stdin'
        }
    }
}
   stage ('push image into repo') {
       steps {
           sh '''
           echo 'list the docker images'
           echo 'pushing the image into docker hub...'
           docker push anuroopps/python-argocd-cicd:$BUILD_NUMBER
           '''
       }
   }
    stage ('Update tag name in deployment yaml') {
    steps {
  dir('Jenkins-Zero-To-Hero') {
  echo 'Updating the tag with $BUILD_NUMBER'
  sh '''
  cd python-jenkins-argocd-k8s/deploy
  echo pwd
  echo 'Before update: '
  cat deploy.yaml
  sed -i "s|image: abhishekf5/todo-app:.*|image: abhishekf5/todo-app:$BUILD_NUMBER|" deploy.yaml
  echo 'After update: '
  cat deploy.yaml
  '''   
    }
   }
  }
    stage('Push Changes to GitHub') {
            steps {
                dir('Jenkins-Zero-To-Hero') {
                withCredentials([string(credentialsId: 'anuroopps-github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                    pwd 
                    cd python-jenkins-argocd-k8s/deploy
                    pwd
                    git config user.email "anuroop@example.com"
                    git config user.name "Anuroop CI Bot"

                    git add deploy.yaml
                    git commit -m "Update image tag to $BUILD_NUMBER"
                    git pull origin main --rebase
                    git push https://$GITHUB_TOKEN@github.com/anuroopps/Jenkins-Zero-To-Hero HEAD:main
                    '''
                }
            }
        }
    }
    stage('Cleanup old Docker tags') {
  steps {
    withCredentials([
      usernamePassword(credentialsId: 'anuroopps-dockerhub', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
      sh '''
        REPO="anuroopps/python-argocd-cicd"

        # Get JWT token from Docker Hub API
        TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\":\"$DOCKERHUB_USERNAME\",\"password\":\"tanushree\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)

        if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
          echo "Failed to get token"
          exit 1
        fi

        echo "Successfully retrieved token"

        AUTH_HEADER="Authorization: JWT $TOKEN"

        # Get tags sorted by last_updated ascending (oldest first)
        tags=$(curl -s -H "$AUTH_HEADER" "https://hub.docker.com/v2/repositories/$REPO/tags?page_size=100" | jq -r '.results | sort_by(.last_updated) | .[].name')

        echo "All tags (oldest to newest):"
        echo "$tags"

        # Count how many tags exist
        total_tags=$(echo "$tags" | wc -l)

        # Calculate how many tags to delete (keep latest 3)
        tags_to_delete_count=$((total_tags - 3))

        if [ "$tags_to_delete_count" -le 0 ]; then
          echo "Less than or equal to 3 tags exist, nothing to delete."
          exit 0
        fi

        echo "Deleting $tags_to_delete_count old tags..."

        # Get tags to delete: oldest tags only
        tags_to_delete=$(echo "$tags" | head -n "$tags_to_delete_count")

        for tag in $tags_to_delete; do
          echo "Deleting tag: $tag"
          curl -s -X DELETE -H "$AUTH_HEADER" "https://hub.docker.com/v2/repositories/$REPO/tags/$tag/"
        done

        echo "Cleanup complete."
      '''
    }
  }
}
}
}
